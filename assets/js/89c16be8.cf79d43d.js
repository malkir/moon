"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7969],{5318:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(7378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),h=l(n),d=a,m=h["".concat(c,".").concat(d)]||h[d]||u[d]||o;return n?r.createElement(m,i(i({ref:t},p),{},{components:n})):r.createElement(m,i({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=h;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},5892:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=n(5773),a=(n(7378),n(5318));const o={title:"Cache"},i=void 0,s={unversionedId:"concepts/cache",id:"concepts/cache",title:"Cache",description:"moon's able to achieve high performance and blazing speeds by implementing a cache that's powered by",source:"@site/docs/concepts/cache.mdx",sourceDirName:"concepts",slug:"/concepts/cache",permalink:"/docs/concepts/cache",draft:!1,editUrl:"https://github.com/moonrepo/moon/tree/master/website/docs/concepts/cache.mdx",tags:[],version:"current",frontMatter:{title:"Cache"},sidebar:"docs",previous:{title:"Concepts",permalink:"/docs/concepts"},next:{title:"File groups",permalink:"/docs/concepts/file-group"}},c={},l=[{value:"Hashing",id:"hashing",level:2},{value:"File structure",id:"file-structure",level:2}],p={toc:l};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"moon's able to achieve high performance and blazing speeds by implementing a cache that's powered by\nour own unique smart hashing layer. All cache is stored in ",(0,a.kt)("inlineCode",{parentName:"p"},".moon/cache"),", relative from the\nworkspace root (be sure to git ignore this folder)."),(0,a.kt)("h2",{id:"hashing"},"Hashing"),(0,a.kt)("p",null,"Incremental builds are possible through a concept known as hashing, where in multiple sources are\naggregated to generate a unique hash. In the context of moon, each time a target is ran we generate\na hash, and if this hash already exists we abort early (cache hit), otherwise we continue the run\n(cache miss)."),(0,a.kt)("p",null,"The tiniest change may trigger a different hash, for example, changing a line of code (when an\ninput), or updating an npm package version, so don't worry if you see ",(0,a.kt)("em",{parentName:"p"},"a lot")," of hashes."),(0,a.kt)("p",null,"Our smart hashing currently takes the following sources into account:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Command (",(0,a.kt)("inlineCode",{parentName:"li"},"command"),") being ran and its arguments (",(0,a.kt)("inlineCode",{parentName:"li"},"args"),")."),(0,a.kt)("li",{parentName:"ul"},"Input sources (",(0,a.kt)("inlineCode",{parentName:"li"},"inputs"),")."),(0,a.kt)("li",{parentName:"ul"},"Output targets (",(0,a.kt)("inlineCode",{parentName:"li"},"outputs"),")."),(0,a.kt)("li",{parentName:"ul"},"Environment variables (",(0,a.kt)("inlineCode",{parentName:"li"},"env"),")."),(0,a.kt)("li",{parentName:"ul"},"Dependencies between projects (",(0,a.kt)("inlineCode",{parentName:"li"},"dependsOn"),") and tasks (",(0,a.kt)("inlineCode",{parentName:"li"},"deps"),")."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"For Node.js tasks"),":",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Node.js version."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"package.json")," dependencies (including development and peer)."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"tsconfig.json")," compiler options (when applicable).")))),(0,a.kt)("h2",{id:"file-structure"},"File structure"),(0,a.kt)("p",null,"The following diagram outlines our cache folder structure and why each piece exists."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},".moon/cache/\n    # List of projects located on the file system. Will only exists when\n    # projects are configured using globs.\n    projectsState.json\n\n    # State of the workspace. Mainly for tracking install times.\n    workspaceState.json\n\n    # Stores hash manifests of every ran task. Exists purely for debugging purposes.\n    hashes/\n        # Contents includes all sources used to generate the hash.\n        <hash>.json\n\n    # Stores `tar.gz` archives of a task's outputs based on its generated hash.\n    out/\n        <hash>.tar.gz\n\n    # State of targets that have been ran or are running, grouped by project and task.\n    runs/\n        <project>/\n            # Information about the project, its tasks, and its configs.\n            # Can be used at runtime by tasks that require this information.\n            runfile.json\n\n            <task>/\n                # Contents of the child process, including stdout, stderr, and exit code.\n                # Also contains the unique hash that is referenced above.\n                lastRunState.json\n")))}u.isMDXComponent=!0}}]);