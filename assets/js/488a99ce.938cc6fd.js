"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2258],{5318:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>u});var n=a(7378);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},m=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),d=p(a),u=r,g=d["".concat(s,".").concat(u)]||d[u]||c[u]||l;return a?n.createElement(g,i(i({ref:t},m),{},{components:a})):n.createElement(g,i({ref:t},m))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},9022:(e,t,a)=>{a.d(t,{Z:()=>l});var n=a(7378),r=a(9619);function l(e){let{header:t,updated:a,version:l}=e;return n.createElement(r.Z,{text:"v"+l,variant:a?"success":"info",className:t?"absolute right-0 top-1.5":"ml-2"})}},9619:(e,t,a)=>{a.d(t,{Z:()=>o});var n=a(7378),r=a(8944),l=a(8896);const i={failure:"bg-red-100 text-red-900",info:"bg-pink-100 text-pink-900",success:"bg-green-100 text-green-900",warning:"bg-orange-100 text-orange-900"};function o(e){let{className:t,icon:a,text:o,variant:s}=e;return n.createElement("span",{className:(0,r.Z)("inline-flex items-center px-1 py-0.5 rounded text-xs font-bold uppercase",s?i[s]:"bg-gray-100 text-gray-800",t)},a&&n.createElement(l.Z,{icon:a,className:"mr-1"}),o)}},2545:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>m});var n=a(5773),r=(a(7378),a(5318)),l=a(9022);const i={title:"Code generation",toc_max_heading_level:6,tags:["codegen","generator","scaffold","template"]},o=void 0,s={unversionedId:"guides/codegen",id:"guides/codegen",title:"Code generation",description:"Code generation provides an easy mechanism for automating common development workflows and file",source:"@site/docs/guides/codegen.mdx",sourceDirName:"guides",slug:"/guides/codegen",permalink:"/docs/guides/codegen",draft:!1,editUrl:"https://github.com/moonrepo/moon/tree/master/website/docs/guides/codegen.mdx",tags:[{label:"codegen",permalink:"/docs/tags/codegen"},{label:"generator",permalink:"/docs/tags/generator"},{label:"scaffold",permalink:"/docs/tags/scaffold"},{label:"template",permalink:"/docs/tags/template"}],version:"current",frontMatter:{title:"Code generation",toc_max_heading_level:6,tags:["codegen","generator","scaffold","template"]},sidebar:"guides",previous:{title:"Continuous integration (CI)",permalink:"/docs/guides/ci"},next:{title:"Docker usage",permalink:"/docs/guides/docker"}},p={},m=[{value:"Creating a new template",id:"creating-a-new-template",level:2},{value:"Configuring <code>template.yml</code>",id:"configuring-templateyml",level:3},{value:"Managing files",id:"managing-files",level:3},{value:"Template engine &amp; syntax",id:"template-engine--syntax",level:3},{value:"Filters",id:"filters",level:4},{value:"Generating code from a template",id:"generating-code-from-a-template",level:2},{value:"Configuring template locations",id:"configuring-template-locations",level:3},{value:"Declaring variables with CLI arguments",id:"declaring-variables-with-cli-arguments",level:3},{value:"Sharing templates",id:"sharing-templates",level:2}],c={toc:m};function d(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(l.Z,{header:!0,version:"0.14",mdxType:"VersionLabel"}),(0,r.kt)("p",null,"Code generation provides an easy mechanism for automating common development workflows and file\nstructures. Whether it's scaffolding a new library or application, updating configuration, or\nstandardizing patterns."),(0,r.kt)("p",null,"To accomplish this, we provide a generator, which is divided into two parts. The first being the\ntemplates and their files to be scaffolded. The second is our rendering engine that writes template\nfiles to a destination."),(0,r.kt)("h2",{id:"creating-a-new-template"},"Creating a new template"),(0,r.kt)("p",null,"To create a new template, run ",(0,r.kt)("a",{parentName:"p",href:"../commands/generate"},(0,r.kt)("inlineCode",{parentName:"a"},"moon generate"))," while passing the ",(0,r.kt)("inlineCode",{parentName:"p"},"--template")," option. This\nwill create a template directory and ",(0,r.kt)("a",{parentName:"p",href:"../config/template"},(0,r.kt)("inlineCode",{parentName:"a"},"template.yml"))," file in the 1st configured template\nlocation defined in ",(0,r.kt)("a",{parentName:"p",href:"../config/workspace#templates"},(0,r.kt)("inlineCode",{parentName:"a"},"generator.templates")),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ moon generate <name> --template\n")),(0,r.kt)("h3",{id:"configuring-templateyml"},"Configuring ",(0,r.kt)("inlineCode",{parentName:"h3"},"template.yml")),(0,r.kt)("p",null,"Every template requires a ",(0,r.kt)("a",{parentName:"p",href:"../config/template"},(0,r.kt)("inlineCode",{parentName:"a"},"template.yml"))," file in the template's directory root. This file\nacts as a schema and declares metadata and variables required by the generator."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="template.yml"',title:'"template.yml"'},"title: 'npm package'\ndescription: |\n  Scaffolds the initial structure for an npm package,\n  including source and test folders, a package.json, and more.\nvariables:\n  name:\n    type: 'string'\n    default: ''\n    required: true\n    prompt: 'Package name?'\n")),(0,r.kt)("h3",{id:"managing-files"},"Managing files"),(0,r.kt)("p",null,"Feel free to add any files and folders to the template that you'd like to be generated by consumers!\nThese files will then be scaffolded 1:1 in structure at the target destination. With that being\nsaid, there are a few unique scenarios to be aware of!"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},'File paths that contain the word "partial" will not be scaffolded. This is to support composition\nand inheritance between templates using\n',(0,r.kt)("a",{parentName:"li",href:"https://tera.netlify.app/docs/#include"},(0,r.kt)("inlineCode",{parentName:"a"},"{% include ... %}")),"."),(0,r.kt)("li",{parentName:"ul"},"Variables can be interpolated into file paths using the form ",(0,r.kt)("inlineCode",{parentName:"li"},"[varName]"),". For example, if you had\na template file ",(0,r.kt)("inlineCode",{parentName:"li"},"src/[type].ts"),", and a variable ",(0,r.kt)("inlineCode",{parentName:"li"},"type"),' with a value of "bin", then the destination\nfile path would be ',(0,r.kt)("inlineCode",{parentName:"li"},"src/bin.ts"),".")),(0,r.kt)("p",null,"An example of the templates folder structure may look something like the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"templates/\n\u251c\u2500\u2500 npm-package/\n\u2502   \u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 tests/\n\u2502   \u251c\u2500\u2500 package.json\n\u2502   \u2514\u2500\u2500 template.yml\n\u2514\u2500\u2500 react-app/\n")),(0,r.kt)("h3",{id:"template-engine--syntax"},"Template engine & syntax"),(0,r.kt)("p",null,"Rendering templates is powered by ",(0,r.kt)("a",{parentName:"p",href:"https://tera.netlify.app/"},"Tera"),", a Rust based template engine\nwith syntax similar to Twig, Liquid, Django, and more. We highly encourage everyone to read Tera's\ndocumentation for an in-depth understanding, but as a quick reference, Tera supports the following:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://tera.netlify.app/docs/#variables"},"Variable interpolation")," (defined with the\n",(0,r.kt)("a",{parentName:"li",href:"../config/template#variables"},(0,r.kt)("inlineCode",{parentName:"a"},"variables"))," setting), with\n",(0,r.kt)("a",{parentName:"li",href:"https://tera.netlify.app/docs/#built-ins"},"built-in filters"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-twig"},"{{ varName }} -> foo\n{{ varName | upper }} -> FOO\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://tera.netlify.app/docs/#if"},"Conditional blocks")," and\n",(0,r.kt)("a",{parentName:"li",href:"https://tera.netlify.app/docs/#for"},"loops"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-twig"},"{% if price < 10 or always_show %}\n    Price is {{ price }}.\n{% elif price > 1000 and not rich %}\n    That's expensive!\n{% else %}\n    N/A\n{% endif %}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-twig"},"{% for item in items %}\n    {{ loop.index }} - {{ item.name }}\n{% endfor %}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"And many more features, like auto-escaping, white space control, and math operators!")),(0,r.kt)("h4",{id:"filters"},"Filters"),(0,r.kt)("p",null,"Filters are a mechanism for transforming values during interpolation and are written using pipes\n(",(0,r.kt)("inlineCode",{parentName:"p"},"|"),"). Tera provides many ",(0,r.kt)("a",{parentName:"p",href:"https://tera.netlify.app/docs/#built-in-filters"},"built-in filters"),", but\nwe also provide the following custom filters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Strings - ",(0,r.kt)("inlineCode",{parentName:"li"},"camel_case"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"pascal_case"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"snake_case"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"upper_snake_case"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"kebab_case"),",\n",(0,r.kt)("inlineCode",{parentName:"li"},"upper_kebab_case"))),(0,r.kt)("h2",{id:"generating-code-from-a-template"},"Generating code from a template"),(0,r.kt)("p",null,"Once a template has been created and configured, you can generate files based on it using the\n",(0,r.kt)("a",{parentName:"p",href:"../commands/generate"},(0,r.kt)("inlineCode",{parentName:"a"},"moon generate"))," command! This is also know as scaffolding or code generation."),(0,r.kt)("p",null,"This command requires the name of a template as the 1st argument. The template name is the folder\nname on the file system that houses all the template files."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ moon generate npm-package\n")),(0,r.kt)("p",null,"An optional destination path, relative from the current working directory, can be provided as the\n2nd argument. If not provided, you'll be prompted during generation to provide one."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ moon generate npm-package ./packages/example\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"This command is extremely interactive, as we'll prompt you for the destination path, variable\nvalues, whether to overwrite files, and more. If you'd prefer to avoid interactions, pass\n",(0,r.kt)("inlineCode",{parentName:"p"},"--defaults"),", or ",(0,r.kt)("inlineCode",{parentName:"p"},"--force"),", or both.")),(0,r.kt)("h3",{id:"configuring-template-locations"},"Configuring template locations"),(0,r.kt)("p",null,"Templates can be located anywhere, especially when ",(0,r.kt)("a",{parentName:"p",href:"#sharing-templates"},"being shared"),". Because of\nthis, our generator will loop through all template paths configured in\n",(0,r.kt)("a",{parentName:"p",href:"../config/workspace#templates"},(0,r.kt)("inlineCode",{parentName:"a"},"generator.templates")),", in order, until a match is found (template name matches the\nfolder name)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".moon/workspace.yml"',title:'".moon/workspace.yml"'},"generator:\n    templates:\n        - './templates'\n        - './other/templates'\n")),(0,r.kt)("h3",{id:"declaring-variables-with-cli-arguments"},"Declaring variables with CLI arguments"),(0,r.kt)("p",null,"During generation, you'll be prompted in the terminal to provide a value for any configured\nvariables. However, you can pre-fill these variable values by passing arbitray command line\narguments after ",(0,r.kt)("inlineCode",{parentName:"p"},"--")," to ",(0,r.kt)("a",{parentName:"p",href:"../commands/generate"},(0,r.kt)("inlineCode",{parentName:"a"},"moon generate")),". Argument names must exactly match the variable\nnames."),(0,r.kt)("p",null,"Using the package template example above, we could pre-fill the ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," variable like so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ moon generate npm-package ./packages/example -- --name '@company/example' --private\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Boolean variables can be negated by prefixing the argument with ",(0,r.kt)("inlineCode",{parentName:"p"},"--no-<arg>"),".")),(0,r.kt)("h2",{id:"sharing-templates"},"Sharing templates"),(0,r.kt)("p",null,"Although moon is designed for a monorepo, you may be using multiple repositories and would like to\nuse the same templates across all of them."),(0,r.kt)("p",null,"This is technically possible, but with 1 caveat, and that is that moon's generator requires\ntemplates to exist within the current repository, relative from the workspace root. So how can we\nshare templates across repositories? Why not try..."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"git submodules"),(0,r.kt)("li",{parentName:"ul"},"npm packages"),(0,r.kt)("li",{parentName:"ul"},"another packaging system")),(0,r.kt)("p",null,"Regardless of the choice, simply configure ",(0,r.kt)("a",{parentName:"p",href:"../config/workspace#templates"},(0,r.kt)("inlineCode",{parentName:"a"},"generator.templates"))," to point to these\nlocations:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".moon/workspace.yml"',title:'".moon/workspace.yml"'},"generator:\n    templates:\n        - './templates'\n        - './node_modules/@company/shared-templates'\n        - './path/to/submodules'\n")))}d.isMDXComponent=!0}}]);