"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[818],{5318:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>k});var a=n(7378);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,p=e.parentName,m=r(e,["components","mdxType","originalType","parentName"]),d=s(n),k=o,u=d["".concat(p,".").concat(k)]||d[k]||c[k]||l;return n?a.createElement(u,i(i({ref:t},m),{},{components:n})):a.createElement(u,i({ref:t},m))}));function k(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,i=new Array(l);i[0]=d;var r={};for(var p in t)hasOwnProperty.call(t,p)&&(r[p]=t[p]);r.originalType=e,r.mdxType="string"==typeof e?e:o,i[1]=r;for(var s=2;s<l;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9785:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(7378),o=n(9619);function l(e){let{text:t="Required"}=e;return a.createElement(o.Z,{text:t,variant:"failure",className:"ml-2"})}},9022:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(7378),o=n(9619);function l(e){let{header:t,updated:n,version:l}=e;return a.createElement(o.Z,{text:"v"+l,variant:n?"success":"info",className:t?"absolute right-0 top-1.5":"ml-2"})}},9619:(e,t,n)=>{n.d(t,{Z:()=>r});var a=n(7378),o=n(8944),l=n(8896);const i={failure:"bg-red-100 text-red-900",info:"bg-pink-100 text-pink-900",success:"bg-green-100 text-green-900",warning:"bg-orange-100 text-orange-900"};function r(e){let{className:t,icon:n,text:r,variant:p}=e;return a.createElement("span",{className:(0,o.Z)("inline-flex items-center px-1 py-0.5 rounded text-xs font-bold uppercase",p?i[p]:"bg-gray-100 text-gray-800",t)},n&&a.createElement(l.Z,{icon:n,className:"mr-1"}),r)}},9908:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>p,default:()=>k,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var a=n(5773),o=(n(7378),n(5318)),l=n(9785),i=n(9022);const r={title:"moon.yml",toc_max_heading_level:6},p=void 0,s={unversionedId:"config/project",id:"config/project",title:"moon.yml",description:"The moon.yml configuration file (formerly project.yml in version <=0.9) is not required but",source:"@site/docs/config/project.mdx",sourceDirName:"config",slug:"/config/project",permalink:"/docs/config/project",draft:!1,editUrl:"https://github.com/moonrepo/moon/tree/master/website/docs/config/project.mdx",tags:[],version:"current",frontMatter:{title:"moon.yml",toc_max_heading_level:6},sidebar:"docs",previous:{title:".moon/project.yml",permalink:"/docs/config/global-project"},next:{title:"template.yml",permalink:"/docs/config/template"}},m={},c=[{value:'<code>dependsOn</code><VersionLabel updated version="0.9" />',id:"dependson",level:2},{value:"<code>fileGroups</code>",id:"filegroups",level:2},{value:'<code>language</code><VersionLabel version="0.3" />',id:"language",level:2},{value:"<code>project</code>",id:"project",level:2},{value:"<code>channel</code>",id:"channel",level:3},{value:"<code>description</code>",id:"description",level:3},{value:"<code>maintainers</code>",id:"maintainers",level:3},{value:"<code>name</code>",id:"name",level:3},{value:"<code>owner</code>",id:"owner",level:3},{value:"<code>tasks</code>",id:"tasks",level:2},{value:"<code>command</code><RequiredLabel />",id:"command",level:3},{value:"Special commands",id:"special-commands",level:4},{value:"<code>args</code>",id:"args",level:3},{value:"<code>deps</code>",id:"deps",level:3},{value:"<code>env</code>",id:"env",level:3},{value:'<code>inputs</code><VersionLabel updated version="0.9" />',id:"inputs",level:3},{value:'<code>local</code><VersionLabel version="0.11" />',id:"local",level:3},{value:"<code>outputs</code>",id:"outputs",level:3},{value:"<code>options</code>",id:"options",level:3},{value:'<code>cache</code><VersionLabel version="0.9" />',id:"cache",level:4},{value:'<code>envFile</code><VersionLabel version="0.11" />',id:"envfile",level:4},{value:"<code>mergeArgs</code>",id:"mergeargs",level:4},{value:"<code>mergeDeps</code>",id:"mergedeps",level:4},{value:"<code>mergeEnv</code>",id:"mergeenv",level:4},{value:"<code>mergeInputs</code>",id:"mergeinputs",level:4},{value:"<code>mergeOutputs</code>",id:"mergeoutputs",level:4},{value:'<code>outputStyle</code><VersionLabel version="0.10" />',id:"outputstyle",level:4},{value:"<code>retryCount</code>",id:"retrycount",level:4},{value:'<code>runDepsInParallel</code><VersionLabel version="0.10" />',id:"rundepsinparallel",level:4},{value:"<code>runInCI</code>",id:"runinci",level:4},{value:"<code>runFromWorkspaceRoot</code>",id:"runfromworkspaceroot",level:4},{value:"<code>type</code>",id:"type",level:3},{value:"<code>type</code>",id:"type-1",level:2},{value:"<code>workspace</code>",id:"workspace",level:2},{value:"<code>inheritedTasks</code>",id:"inheritedtasks",level:3},{value:"<code>exclude</code>",id:"exclude",level:4},{value:"<code>include</code>",id:"include",level:4},{value:"<code>rename</code>",id:"rename",level:4},{value:'<code>typescript</code><VersionLabel version="0.12" />',id:"typescript",level:3}],d={toc:c};function k(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"moon.yml")," configuration file (formerly ",(0,o.kt)("inlineCode",{parentName:"p"},"project.yml")," in version <=0.9) ",(0,o.kt)("em",{parentName:"p"},"is not required")," but\ncan be used to define additional metadata for a project, override inherited tasks, and more at the\nproject-level. When used, this file must exist in a project's root, as configured in\n",(0,o.kt)("a",{parentName:"p",href:"./workspace#projects"},(0,o.kt)("inlineCode",{parentName:"a"},"projects")),"."),(0,o.kt)("h2",{id:"dependson"},(0,o.kt)("inlineCode",{parentName:"h2"},"dependsOn"),(0,o.kt)(i.Z,{updated:!0,version:"0.9",mdxType:"VersionLabel"})),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"(ProjectID | DependencyConfig)[]"))),(0,o.kt)("p",null,"Explicitly defines ",(0,o.kt)("em",{parentName:"p"},"other")," projects that ",(0,o.kt)("em",{parentName:"p"},"this")," project depends on, primarily when generating the\nproject and task graphs. The most common use case for this is building those projects ",(0,o.kt)("em",{parentName:"p"},"before"),"\nbuilding this one, and for syncing ",(0,o.kt)("a",{parentName:"p",href:"./workspace#syncprojectworkspacedependencies"},(0,o.kt)("inlineCode",{parentName:"a"},"package.json")),"\ndependencies and ",(0,o.kt)("a",{parentName:"p",href:"./workspace#syncprojectreferences"},(0,o.kt)("inlineCode",{parentName:"a"},"tsconfig.json"))," project references when\napplicable."),(0,o.kt)("p",null,"When defined, this setting requires an array of project names, which are the keys found in the\n",(0,o.kt)("a",{parentName:"p",href:"./workspace#projects"},(0,o.kt)("inlineCode",{parentName:"a"},"projects"))," map."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml"',title:'"moon.yml"'},"dependsOn:\n  - 'apiClients'\n  - 'designSystem'\n")),(0,o.kt)("p",null,"A dependency object can also be defined, where a specific ",(0,o.kt)("inlineCode",{parentName:"p"},"scope"),' can be assigned, which accepts\n"production" (default), "development", or "peer". This maps to the appropriate field in\n',(0,o.kt)("inlineCode",{parentName:"p"},"package.json")," when syncing."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml"',title:'"moon.yml"'},"dependsOn:\n  - id: 'apiClients'\n    scope: 'production'\n  - id: 'designSystem'\n    scope: 'peer'\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Learn more about ",(0,o.kt)("a",{parentName:"p",href:"../concepts/project#dependencies"},"implicit and explicit dependencies"),".")),(0,o.kt)("h2",{id:"filegroups"},(0,o.kt)("inlineCode",{parentName:"h2"},"fileGroups")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"Record<string, string[]>"))),(0,o.kt)("p",null,"Defines ",(0,o.kt)("a",{parentName:"p",href:"../concepts/file-group"},"file groups")," to be used by local tasks. By default, this setting\n",(0,o.kt)("em",{parentName:"p"},"is not required")," for the following reasons:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"File groups are an optional feature, and are designed for advanced use cases."),(0,o.kt)("li",{parentName:"ul"},"File groups defined in ",(0,o.kt)("a",{parentName:"li",href:"./global-project"},(0,o.kt)("inlineCode",{parentName:"a"},".moon/project.yml"))," will be inherited by all projects.")),(0,o.kt)("p",null,"When defined this setting requires a map, where the key is the file group name, and the value is a\nlist of ",(0,o.kt)("a",{parentName:"p",href:"../concepts/file-pattern"},"globs or paths"),". Globs and paths are\n",(0,o.kt)("a",{parentName:"p",href:"../concepts/file-pattern#project-relative"},"relative to a project")," (even when defined\n",(0,o.kt)("a",{parentName:"p",href:"./global-project"},"globally"),")."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml"',title:'"moon.yml"'},"fileGroups:\n  configs:\n    - '*.config.{js,cjs,mjs}'\n    - '*.json'\n  sources:\n    - 'src/**/*'\n    - 'types/**/*'\n  tests:\n    - 'tests/**/*'\n    - '**/__tests__/**/*'\n  assets:\n    - 'assets/**/*'\n    - 'images/**/*'\n    - 'static/**/*'\n    - '**/*.{scss,css}'\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"The code snippet above is merely an example of file groups. Feel free to use those groups as-is,\nmodify the glob lists, add and remove groups, or implement completely new groups. The choice is\nyours!")),(0,o.kt)("h2",{id:"language"},(0,o.kt)("inlineCode",{parentName:"h2"},"language"),(0,o.kt)(i.Z,{version:"0.3",mdxType:"VersionLabel"})),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"ProjectLanguage"))),(0,o.kt)("p",null,"The primary programming language the project is written in. Supports the following values:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"bash")," - A ",(0,o.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Bash_(Unix_shell)"},"Bash")," based project (Unix only).",(0,o.kt)(i.Z,{version:"0.6",mdxType:"VersionLabel"})),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"batch")," - A ",(0,o.kt)("a",{parentName:"li",href:"https://en.wikibooks.org/wiki/Windows_Batch_Scripting"},"Batch")," based project (Windows\nonly). ",(0,o.kt)(i.Z,{version:"0.9",mdxType:"VersionLabel"})),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"javascript")," - A ",(0,o.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript"},"JavaScript")," based\nproject. Inferred when ",(0,o.kt)("inlineCode",{parentName:"li"},"package.json")," exists."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"typescript")," - A ",(0,o.kt)("a",{parentName:"li",href:"https://www.typescriptlang.org/"},"TypeScript")," based project. Inferred when\n",(0,o.kt)("inlineCode",{parentName:"li"},"tsconfig.json")," exists."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"unknown")," (default) - When not configured or inferred.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml"',title:'"moon.yml"'},"language: 'javascript'\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"For convenience, when this setting is not defined, moon will attempt to detect the language based\non configuration files found in the project root.")),(0,o.kt)("h2",{id:"project"},(0,o.kt)("inlineCode",{parentName:"h2"},"project")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"ProjectMetadataConfig"))),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"project")," setting defines metadata about the project itself. Although this setting is optional,\nwhen defined, all fields within it ",(0,o.kt)("em",{parentName:"p"},"must")," be defined as well."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml"',title:'"moon.yml"'},"project:\n  name: 'moon'\n  description: 'A monorepo management tool.'\n  channel: '#moon'\n  owner: 'infra.platform'\n  maintainers: ['miles.johnson']\n")),(0,o.kt)("p",null,"The information listed within ",(0,o.kt)("inlineCode",{parentName:"p"},"project")," is purely informational and primarily displayed within the\nCLI. However, this setting exists for you, your team, and your company, as a means to identify and\norganize all projects. Feel free to build your own tooling around these settings!"),(0,o.kt)("h3",{id:"channel"},(0,o.kt)("inlineCode",{parentName:"h3"},"channel")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"string"))),(0,o.kt)("p",null,"The Slack, Discord, Teams, IRC, etc channel name (with leading #) in which to discuss the project."),(0,o.kt)("h3",{id:"description"},(0,o.kt)("inlineCode",{parentName:"h3"},"description")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"string"))),(0,o.kt)("p",null,"A description of what the project does and aims to achieve. Be as descriptive as possible, as this\nis the kind of information search engines would index on."),(0,o.kt)("h3",{id:"maintainers"},(0,o.kt)("inlineCode",{parentName:"h3"},"maintainers")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"string[]"))),(0,o.kt)("p",null,"A list of people/developers that maintain the project, review code changes, and can provide support.\nCan be a name, email, LDAP name, GitHub username, etc, the choice is yours."),(0,o.kt)("h3",{id:"name"},(0,o.kt)("inlineCode",{parentName:"h3"},"name")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"string"))),(0,o.kt)("p",null,"A human readable name of the project. This is ",(0,o.kt)("em",{parentName:"p"},"different")," from the unique project name configured in\n",(0,o.kt)("a",{parentName:"p",href:"./workspace#projects"},(0,o.kt)("inlineCode",{parentName:"a"},"projects")),"."),(0,o.kt)("h3",{id:"owner"},(0,o.kt)("inlineCode",{parentName:"h3"},"owner")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"string"))),(0,o.kt)("p",null,"The team or organization that owns the project. Can be a title, LDAP name, GitHub team, etc. We\nsuggest ",(0,o.kt)("em",{parentName:"p"},"not")," listing people/developers as the owner, use ",(0,o.kt)("a",{parentName:"p",href:"#maintainers"},"maintainers")," instead."),(0,o.kt)("h2",{id:"tasks"},(0,o.kt)("inlineCode",{parentName:"h2"},"tasks")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"Record<string, TaskConfig>"))),(0,o.kt)("p",null,"Tasks are actions that are ran within the context of a ",(0,o.kt)("a",{parentName:"p",href:"../concepts/project"},"project"),", and commonly\nwrap an npm binary or system command. This setting requires a map, where the key is a unique name\nfor the task, and the value is an object of task parameters."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml"',title:'"moon.yml"'},"tasks:\n  format:\n    command: 'prettier'\n  lint:\n    command: 'eslint'\n  test:\n    command: 'jest'\n  typecheck:\n    command: 'tsc'\n")),(0,o.kt)("h3",{id:"command"},(0,o.kt)("inlineCode",{parentName:"h3"},"command"),(0,o.kt)(l.Z,{mdxType:"RequiredLabel"})),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"string | string[]"))),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"command")," field is the command line to run for the task, including the command name (must be\nfirst) and any optional ",(0,o.kt)("a",{parentName:"p",href:"#args"},"arguments"),". This field is required when ",(0,o.kt)("em",{parentName:"p"},"not")," inheriting a global\ntask of the same name."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml" {3}',title:'"moon.yml"',"{3}":!0},"tasks:\n  format:\n    # Using a string\n    command: 'prettier --check .'\n    # Using an array\n    command:\n      - 'prettier'\n      - '--check'\n      - '.'\n")),(0,o.kt)("p",null,"By default a task assumes the command name is an npm binary, and if you'd like to reference a system\ncommand, you'll also need to set the ",(0,o.kt)("a",{parentName:"p",href:"#type"},(0,o.kt)("inlineCode",{parentName:"a"},"type")),' to "system". We do our best to automatically\ndetect this, but it\'s not perfect.'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml"',title:'"moon.yml"'},"tasks:\n  clean:\n    command: 'rm -rf ./dist'\n    type: 'system'\n")),(0,o.kt)("h4",{id:"special-commands"},"Special commands"),(0,o.kt)("p",null,"For interoperability reasons, the following command names have special handling."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"noop"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"no-op"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"nop"),' - Marks the task as a "no operation". Will not execute a command in the\naction runner but can define dependencies.'),(0,o.kt)("li",{parentName:"ul"},"When ",(0,o.kt)("inlineCode",{parentName:"li"},"type"),' is "node":',(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"node"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"npm"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"pnpm"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"yarn")," - Uses the binaries from the toolchain."))),(0,o.kt)("li",{parentName:"ul"},"When ",(0,o.kt)("inlineCode",{parentName:"li"},"type"),' is "system":',(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"cmd"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"cmd.exe")," - Will execute the arguments with ",(0,o.kt)("inlineCode",{parentName:"li"},"cmd.exe")," (Windows only)."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"powershell"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"powershell.exe")," - Will execute the arguments with ",(0,o.kt)("inlineCode",{parentName:"li"},"powershell.exe")," (Windows\nonly).")))),(0,o.kt)("h3",{id:"args"},(0,o.kt)("inlineCode",{parentName:"h3"},"args")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"string | string[]"))),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"args")," field is a collection of ",(0,o.kt)("em",{parentName:"p"},"additional")," arguments to pass to the command line when\nexecuting the task. This field exists purely to provide arguments for\n",(0,o.kt)("a",{parentName:"p",href:"./global-project#tasks"},"inherited tasks"),"."),(0,o.kt)("p",null,"This setting can be defined using a string, or an array of strings. We suggest using arrays when\ndealing with many args, or the args string cannot be parsed easily."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml" {4,5}',title:'"moon.yml"',"{4,5}":!0},"tasks:\n  test:\n    command: 'jest'\n    # Using a string\n    args: '--color --maxWorkers 3'\n    # Using an array\n    args:\n      - '--color'\n      - '--maxWorkers'\n      - '3'\n")),(0,o.kt)("p",null,"However, for the array approach to work correctly, each argument ",(0,o.kt)("em",{parentName:"p"},"must")," be its own distinct item,\nincluding argument values. For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml"',title:'"moon.yml"'},"tasks:\n  test:\n    command: 'jest'\n    args:\n      # Valid\n      - '--maxWorkers'\n      - '3'\n      # Also valid\n      - '--maxWorkers=3'\n      # Invalid\n      - '--maxWorkers 3'\n")),(0,o.kt)("h3",{id:"deps"},(0,o.kt)("inlineCode",{parentName:"h3"},"deps")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"Target[]"))),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"deps")," field is a list of other tasks (known as ",(0,o.kt)("a",{parentName:"p",href:"../concepts/target"},"targets"),"), either within\nthis project or found in another project, that will be executed ",(0,o.kt)("em",{parentName:"p"},"before")," this task. It achieves this\nby generating a directed task graph based on the project graph."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml" {4-6}',title:'"moon.yml"',"{4-6}":!0},"tasks:\n  build:\n    command: 'webpack'\n    deps:\n      - 'apiClients:build'\n      - 'designSystem:build'\n")),(0,o.kt)("h3",{id:"env"},(0,o.kt)("inlineCode",{parentName:"h3"},"env")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"Record<string, string>"))),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"env")," field is map of strings that are passed as environment variables when running the command.\nVariables defined here will take precedence over those loaded with ",(0,o.kt)("a",{parentName:"p",href:"#envfile"},(0,o.kt)("inlineCode",{parentName:"a"},"envFile")),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml" {4,5}',title:'"moon.yml"',"{4,5}":!0},"tasks:\n  build:\n    command: 'webpack'\n    env:\n      NODE_ENV: 'production'\n")),(0,o.kt)("h3",{id:"inputs"},(0,o.kt)("inlineCode",{parentName:"h3"},"inputs"),(0,o.kt)(i.Z,{updated:!0,version:"0.9",mdxType:"VersionLabel"})),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"string[]"))),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"inputs")," field is a list of sources that calculate whether to execute this task based on the\nenvironment and files that have been touched since the last time the task has been ran. If ",(0,o.kt)("em",{parentName:"p"},"not"),"\ndefined, then all files within a project are considered an input (",(0,o.kt)("inlineCode",{parentName:"p"},"**/*"),")."),(0,o.kt)("p",null,"Inputs support the following source types:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Environment variables (must start with a ",(0,o.kt)("inlineCode",{parentName:"li"},"$"),"). ",(0,o.kt)(i.Z,{version:"0.9",mdxType:"VersionLabel"})),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"../concepts/file-pattern#project-relative"},"Project and workspace relative file patterns"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml" {4-10}',title:'"moon.yml"',"{4-10}":!0},"tasks:\n  lint:\n    command: 'eslint'\n    inputs:\n      # Config files anywhere within the project\n      - '**/.eslintignore'\n      - '**/.eslintrc.js'\n      # Config files at the workspace root\n      - '/.eslintignore'\n      - '/.eslintrc.js'\n      # Environment variables\n      - '$ESLINT_CACHE'\n")),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"When using an environment variable, we assume ",(0,o.kt)("em",{parentName:"p"},"it's not defined")," by default, and will trigger an\naffected state when it ",(0,o.kt)("em",{parentName:"p"},"is")," defined. If the environment variable always exists, then the task will\nalways run and bypass the cache.")),(0,o.kt)("h3",{id:"local"},(0,o.kt)("inlineCode",{parentName:"h3"},"local"),(0,o.kt)(i.Z,{version:"0.11",mdxType:"VersionLabel"})),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"boolean"))),(0,o.kt)("p",null,"Marks the task as local only. This should primarily be enabled for long-running or never-ending\ntasks, like development servers and watch mode. Defaults to ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),' if the task name is "dev",\n"start", or "serve", and ',(0,o.kt)("inlineCode",{parentName:"p"},"false")," otherwise."),(0,o.kt)("p",null,"This is a convenience setting for local development that sets the following task options:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#cache"},(0,o.kt)("inlineCode",{parentName:"a"},"cache"))," -> Turned off"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#outputstyle"},(0,o.kt)("inlineCode",{parentName:"a"},"outputStyle")),' -> Set to "stream"'),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#runinci"},(0,o.kt)("inlineCode",{parentName:"a"},"runInCI"))," -> Turned off")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml" {5}',title:'"moon.yml"',"{5}":!0},"tasks:\n  dev:\n    command: 'webpack server'\n    local: true\n")),(0,o.kt)("h3",{id:"outputs"},(0,o.kt)("inlineCode",{parentName:"h3"},"outputs")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"string[]"))),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"outputs")," field is a list of files and folders that are ",(0,o.kt)("em",{parentName:"p"},"created")," as a result of executing this\ntask, excluding internal cache files that are created from the underlying command (for example,\n",(0,o.kt)("inlineCode",{parentName:"p"},".eslintcache"),")."),(0,o.kt)("p",null,"Outputs are necessary for ",(0,o.kt)("a",{parentName:"p",href:"../concepts/cache"},"incremental caching and rehydration"),". If you'd prefer\nto avoid that functionality, omit this field."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml" {4-6}',title:'"moon.yml"',"{4-6}":!0},"tasks:\n  build:\n    command: 'webpack'\n    outputs:\n      # Relative from project root\n      - 'build/'\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Outputs require ",(0,o.kt)("a",{parentName:"p",href:"../concepts/file-pattern#project-relative"},"project relative file patterns"),".")),(0,o.kt)("h3",{id:"options"},(0,o.kt)("inlineCode",{parentName:"h3"},"options")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"TaskOptionsConfig"))),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"options")," field is an object of configurable options that can be used to modify the task and its\nexecution. The following fields can be provided, with merge related fields supporting all\n",(0,o.kt)("a",{parentName:"p",href:"../concepts/task#merge-strategies"},"merge strategies"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml" {6-8}',title:'"moon.yml"',"{6-8}":!0},"tasks:\n  typecheck:\n    command: 'tsc --noEmit'\n    options:\n      mergeArgs: 'replace'\n      runFromWorkspaceRoot: true\n")),(0,o.kt)("h4",{id:"cache"},(0,o.kt)("inlineCode",{parentName:"h4"},"cache"),(0,o.kt)(i.Z,{version:"0.9",mdxType:"VersionLabel"})),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"boolean"))),(0,o.kt)("p",null,"Whether to cache the task's execution result using our ",(0,o.kt)("a",{parentName:"p",href:"../concepts/cache#hashing"},"smart hashing"),"\nsystem. If disabled, ",(0,o.kt)("em",{parentName:"p"},"will not")," create a cache hash, and ",(0,o.kt)("em",{parentName:"p"},"will not")," persist a task's\n",(0,o.kt)("a",{parentName:"p",href:"#outputs"},"outputs"),". Defaults to ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,o.kt)("p",null,"We suggest disabling caching when defining cleanup tasks, one-off scripts, or file system heavy\noperations."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml" {6}',title:'"moon.yml"',"{6}":!0},"tasks:\n  clean:\n    command: 'rm -rf ./temp'\n    options:\n      cache: false\n")),(0,o.kt)("h4",{id:"envfile"},(0,o.kt)("inlineCode",{parentName:"h4"},"envFile"),(0,o.kt)(i.Z,{version:"0.11",mdxType:"VersionLabel"})),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"boolean | string"))),(0,o.kt)("p",null,"A boolean or path to a project relative file (also know as dotenv file) that defines a collection of\n",(0,o.kt)("a",{parentName:"p",href:"#env"},"environment variables")," for the current task. Variables will be loaded on project creation,\nbut will ",(0,o.kt)("em",{parentName:"p"},"not")," override those defined in ",(0,o.kt)("a",{parentName:"p",href:"#env"},(0,o.kt)("inlineCode",{parentName:"a"},"env")),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml" {6}',title:'"moon.yml"',"{6}":!0},"tasks:\n  build:\n    command: 'webpack'\n    options:\n      # Defaults to .env\n      envFile: true\n      # Or\n      envFile: '.env.production'\n")),(0,o.kt)("h4",{id:"mergeargs"},(0,o.kt)("inlineCode",{parentName:"h4"},"mergeArgs")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"TaskMergeStrategy"))),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"../concepts/task#merge-strategies"},"strategy")," to use when merging the ",(0,o.kt)("a",{parentName:"p",href:"#args"},(0,o.kt)("inlineCode",{parentName:"a"},"args")),' list with\nan inherited task. Defaults to "append".'),(0,o.kt)("h4",{id:"mergedeps"},(0,o.kt)("inlineCode",{parentName:"h4"},"mergeDeps")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"TaskMergeStrategy"))),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"../concepts/task#merge-strategies"},"strategy")," to use when merging the ",(0,o.kt)("a",{parentName:"p",href:"#deps"},(0,o.kt)("inlineCode",{parentName:"a"},"deps")),' list with\nan inherited task. Defaults to "append".'),(0,o.kt)("h4",{id:"mergeenv"},(0,o.kt)("inlineCode",{parentName:"h4"},"mergeEnv")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"TaskMergeStrategy"))),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"../concepts/task#merge-strategies"},"strategy")," to use when merging the ",(0,o.kt)("a",{parentName:"p",href:"#env"},(0,o.kt)("inlineCode",{parentName:"a"},"env")),' map with an\ninherited task. Defaults to "append".'),(0,o.kt)("h4",{id:"mergeinputs"},(0,o.kt)("inlineCode",{parentName:"h4"},"mergeInputs")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"TaskMergeStrategy"))),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"../concepts/task#merge-strategies"},"strategy")," to use when merging the ",(0,o.kt)("a",{parentName:"p",href:"#inputs"},(0,o.kt)("inlineCode",{parentName:"a"},"inputs")),' list\nwith an inherited task. Defaults to "append".'),(0,o.kt)("h4",{id:"mergeoutputs"},(0,o.kt)("inlineCode",{parentName:"h4"},"mergeOutputs")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"TaskMergeStrategy"))),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"../concepts/task#merge-strategies"},"strategy")," to use when merging the ",(0,o.kt)("a",{parentName:"p",href:"#outputs"},(0,o.kt)("inlineCode",{parentName:"a"},"outputs")),' list\nwith an inherited task. Defaults to "append".'),(0,o.kt)("h4",{id:"outputstyle"},(0,o.kt)("inlineCode",{parentName:"h4"},"outputStyle"),(0,o.kt)(i.Z,{version:"0.10",mdxType:"VersionLabel"})),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"TaskOutputStyle"))),(0,o.kt)("p",null,"Controls how stdout/stderr is displayed when the task is ran as a ",(0,o.kt)("em",{parentName:"p"},"transitive target"),". By default,\nthis setting is not defined and defers to the action runner, but can be overridden with one of the\nfollowing values:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"buffer")," - Buffers output and displays after the task has exited (either success or failure)."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"buffer-only-failure")," - Like ",(0,o.kt)("inlineCode",{parentName:"li"},"buffer"),", but only displays on failures.",(0,o.kt)(i.Z,{version:"0.11",mdxType:"VersionLabel"})),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"hash")," - Ignores output and only displays the generated ",(0,o.kt)("a",{parentName:"li",href:"../concepts/cache#hashing"},"hash"),".",(0,o.kt)(i.Z,{version:"0.11",mdxType:"VersionLabel"})),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"none")," - Ignores output. ",(0,o.kt)(i.Z,{version:"0.11",mdxType:"VersionLabel"})),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"stream")," - Streams output directly to the terminal. Will prefix each line of output with the\ntarget.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml" {5}',title:'"moon.yml"',"{5}":!0},"tasks:\n  test:\n    # ...\n    options:\n      outputStyle: 'stream'\n")),(0,o.kt)("h4",{id:"retrycount"},(0,o.kt)("inlineCode",{parentName:"h4"},"retryCount")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"number"))),(0,o.kt)("p",null,"The number of attempts the task will retry execution before returning a failure. This is especially\nuseful for flaky tasks. Defaults to ",(0,o.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml" {5}',title:'"moon.yml"',"{5}":!0},"tasks:\n  test:\n    # ...\n    options:\n      retryCount: 3\n")),(0,o.kt)("h4",{id:"rundepsinparallel"},(0,o.kt)("inlineCode",{parentName:"h4"},"runDepsInParallel"),(0,o.kt)(i.Z,{version:"0.10",mdxType:"VersionLabel"})),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"boolean")),(0,o.kt)("p",null,"Whether to run the task's ",(0,o.kt)("a",{parentName:"p",href:"#deps"},(0,o.kt)("inlineCode",{parentName:"a"},"deps"))," in parallel or serial (in order). Defaults to ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml" {8}',title:'"moon.yml"',"{8}":!0},"tasks:\n  start:\n    # ...\n    deps:\n      - '~:clean'\n      - '~:build'\n    options:\n      runDepsInParallel: false\n")),(0,o.kt)("h4",{id:"runinci"},(0,o.kt)("inlineCode",{parentName:"h4"},"runInCI")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"boolean"))),(0,o.kt)("p",null,"Whether to run the task automatically in a CI (continuous integration) environment when affected by\ntouched files, typically through the ",(0,o.kt)("a",{parentName:"p",href:"../commands/ci"},(0,o.kt)("inlineCode",{parentName:"a"},"moon ci"))," command. Defaults to ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," unless\nthe ",(0,o.kt)("a",{parentName:"p",href:"#local"},(0,o.kt)("inlineCode",{parentName:"a"},"local"))," setting is disabled, but is ",(0,o.kt)("em",{parentName:"p"},"always")," true when a task defines\n",(0,o.kt)("a",{parentName:"p",href:"#outputs"},(0,o.kt)("inlineCode",{parentName:"a"},"outputs")),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml" {5}',title:'"moon.yml"',"{5}":!0},"tasks:\n  build:\n    # ...\n    options:\n      runInCI: false\n")),(0,o.kt)("h4",{id:"runfromworkspaceroot"},(0,o.kt)("inlineCode",{parentName:"h4"},"runFromWorkspaceRoot")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"boolean"))),(0,o.kt)("p",null,"Whether to use the workspace root as the working directory when executing a task. Defaults to\n",(0,o.kt)("inlineCode",{parentName:"p"},"false")," and runs from the task's project root."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml" {5}',title:'"moon.yml"',"{5}":!0},"tasks:\n  typecheck:\n    # ...\n    options:\n      runFromWorkspaceRoot: true\n")),(0,o.kt)("h3",{id:"type"},(0,o.kt)("inlineCode",{parentName:"h3"},"type")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"type")," field defines the type of command to run, where to locate its executable, and which tool\nto execute it with. By default will set to a value based on the project's ",(0,o.kt)("a",{parentName:"p",href:"#language"},(0,o.kt)("inlineCode",{parentName:"a"},"language")),"."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"node")," - Command is a binary within node modules and will be executed with Node.js."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"system")," - Command is expected to exist within the system's environment."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"unknown")," - When not inferred.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml" {4}',title:'"moon.yml"',"{4}":!0},"tasks:\n  env:\n    command: 'printenv'\n    type: 'system'\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"This field exists because of our ",(0,o.kt)("a",{parentName:"p",href:"../concepts/toolchain"},"toolchain"),", and moon ensuring the correct\ncommand is ran.")),(0,o.kt)("h2",{id:"type-1"},(0,o.kt)("inlineCode",{parentName:"h2"},"type")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"ProjectType"))),(0,o.kt)("p",null,"The type of project. Supports the following values:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"application")," - A backend or frontend application that communicates over HTTP, TCP, RPC, etc."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"library")," - A self-contained, shareable, and publishable set of code."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"tool")," - An internal tool, command line program, one-off script, etc."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"unknown")," (default) - When not configured.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml"',title:'"moon.yml"'},"type: 'application'\n")),(0,o.kt)("h2",{id:"workspace"},(0,o.kt)("inlineCode",{parentName:"h2"},"workspace")),(0,o.kt)("p",null,"Dictates how a project interacts with settings defined at the workspace-level."),(0,o.kt)("h3",{id:"inheritedtasks"},(0,o.kt)("inlineCode",{parentName:"h3"},"inheritedTasks")),(0,o.kt)("p",null,"Provides a layer of control when inheriting tasks from ",(0,o.kt)("a",{parentName:"p",href:"./global-project"},(0,o.kt)("inlineCode",{parentName:"a"},".moon/project.yml")),"."),(0,o.kt)("h4",{id:"exclude"},(0,o.kt)("inlineCode",{parentName:"h4"},"exclude")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"string[]"))),(0,o.kt)("p",null,"The optional ",(0,o.kt)("inlineCode",{parentName:"p"},"exclude")," setting permits a project to exclude specific tasks from being inherited. It\naccepts a list of strings, where each string is the name of a global task to exclude."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml" {4}',title:'"moon.yml"',"{4}":!0},"workspace:\n  inheritedTasks:\n    # Exclude the inherited `test` task for this project\n    exclude: ['test']\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Exclusion is applied after inclusion and before renaming.")),(0,o.kt)("h4",{id:"include"},(0,o.kt)("inlineCode",{parentName:"h4"},"include")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"string[]"))),(0,o.kt)("p",null,"The optional ",(0,o.kt)("inlineCode",{parentName:"p"},"include")," setting permits a project to ",(0,o.kt)("em",{parentName:"p"},"only")," include specific inherited tasks (works\nlike an allow/white list). It accepts a list of strings, where each string is the name of a global\ntask to include."),(0,o.kt)("p",null,"When this field is not defined, the project will inherit all tasks from the global project config."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml" {4,7-9}',title:'"moon.yml"',"{4,7-9}":!0},"workspace:\n  inheritedTasks:\n    # Include *no* tasks (works like a full exclude)\n    include: []\n\n    # Only include the `lint` and `test` tasks for this project\n    include:\n      - 'lint'\n      - 'test'\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Inclusion is applied before exclusion and renaming.")),(0,o.kt)("h4",{id:"rename"},(0,o.kt)("inlineCode",{parentName:"h4"},"rename")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"Record<string, string>"))),(0,o.kt)("p",null,"The optional ",(0,o.kt)("inlineCode",{parentName:"p"},"rename")," setting permits a project to rename the inherited task within the current\nproject. It accepts a map of strings, where the key is the original name (found in the global\nproject config), and the value is the new name to use."),(0,o.kt)("p",null,"For example, say we have 2 tasks in the global project config called ",(0,o.kt)("inlineCode",{parentName:"p"},"buildPackage")," and\n",(0,o.kt)("inlineCode",{parentName:"p"},"buildApplication"),", but we only need 1, and since we're an application, we should omit and rename."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml" {4,5}',title:'"moon.yml"',"{4,5}":!0},"workspace:\n  inheritedTasks:\n    exclude: ['buildPackage']\n    rename:\n      buildApplication: 'build'\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Renaming occurs after inclusion and exclusion.")),(0,o.kt)("h3",{id:"typescript"},(0,o.kt)("inlineCode",{parentName:"h3"},"typescript"),(0,o.kt)(i.Z,{version:"0.12",mdxType:"VersionLabel"})),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"boolean"))),(0,o.kt)("p",null,"Enables or disables ",(0,o.kt)("a",{parentName:"p",href:"./workspace#typescript"},"TypeScript support")," for this specific project.\nCurrently controls project reference syncing and ",(0,o.kt)("inlineCode",{parentName:"p"},"tsconfig.json")," creation. Defaults to ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml" {2}',title:'"moon.yml"',"{2}":!0},"workspace:\n  typescript: false\n")))}k.isMDXComponent=!0}}]);