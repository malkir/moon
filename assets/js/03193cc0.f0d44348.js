"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3363],{9798:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(7378),o=n(8944);const r="tabItem_wHwb";function l(e){let{children:t,hidden:n,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,o.Z)(r,l),hidden:n},t)}},3337:(e,t,n)=>{n.d(t,{Z:()=>m});var a=n(5773),o=n(7378),r=n(8944),l=n(6457),s=n(784),i=n(9947),p=n(3457);const c="tabList_J5MA",u="tabItem_l0OV";function d(e){var t,n;const{lazy:l,block:d,defaultValue:m,values:g,groupId:f,className:h}=e,k=o.Children.map(e.children,(e=>{if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),y=null!=g?g:k.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),v=(0,s.l)(y,((e,t)=>e.value===t.value));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const b=null===m?m:null!=(t=null!=m?m:null==(n=k.find((e=>e.props.default)))?void 0:n.props.value)?t:k[0].props.value;if(null!==b&&!y.some((e=>e.value===b)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+y.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:j,setTabGroupChoices:w}=(0,i.U)(),[N,x]=(0,o.useState)(b),T=[],{blockElementScrollPositionUntilNextRender:C}=(0,p.o5)();if(null!=f){const e=j[f];null!=e&&e!==N&&y.some((t=>t.value===e))&&x(e)}const E=e=>{const t=e.currentTarget,n=T.indexOf(t),a=y[n].value;a!==N&&(C(t),x(a),null!=f&&w(f,String(a)))},S=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{var a;const t=T.indexOf(e.currentTarget)+1;n=null!=(a=T[t])?a:T[0];break}case"ArrowLeft":{var o;const t=T.indexOf(e.currentTarget)-1;n=null!=(o=T[t])?o:T[T.length-1];break}}null==(t=n)||t.focus()};return o.createElement("div",{className:(0,r.Z)("tabs-container",c)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":d},h)},y.map((e=>{let{value:t,label:n,attributes:l}=e;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:N===t?0:-1,"aria-selected":N===t,key:t,ref:e=>T.push(e),onKeyDown:S,onFocus:E,onClick:E},l,{className:(0,r.Z)("tabs__item",u,null==l?void 0:l.className,{"tabs__item--active":N===t})}),null!=n?n:t)}))),l?(0,o.cloneElement)(k.filter((e=>e.props.value===N))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},k.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==N})))))}function m(e){const t=(0,l.Z)();return o.createElement(d,(0,a.Z)({key:String(t)},e))}},6642:(e,t,n)=>{n.d(t,{Z:()=>p});var a=n(7378),o=n(4267),r=n(9798),l=n(3337);function s(e,t,n){let a=e.package?"yarn workspace "+e.package+" add ":"yarn add ";return e.dev?a+="--dev ":e.peer&&(a+="--peer "),n&&t&&!e.package&&(a+="-W "),a+=e.dep,a}function i(e,t){let n="pnpm add ";return e.dev?n+="--save-dev ":e.peer&&(n+="--save-peer "),e.package?n+="--filter "+e.package+" ":t&&(n+="-w "),n+=e.dep,n}function p(e){let t=s(e,!1,!0),n=i(e,!1);return e.package||(t+="\n\n# If using workspaces\n",n+="\n\n# If using workspaces\n",t+=s(e,!0,!0),n+=i(e,!0)),a.createElement(l.Z,{groupId:"package-manager",defaultValue:"yarn",values:[{label:"Yarn",value:"yarn"},{label:"Yarn (classic)",value:"yarn1"},{label:"npm",value:"npm"},{label:"pnpm",value:"pnpm"}]},a.createElement(r.Z,{value:"yarn"},a.createElement(o.Z,{language:"shell"},s(e,!1,!1))),a.createElement(r.Z,{value:"yarn1"},a.createElement(o.Z,{language:"shell"},t)),a.createElement(r.Z,{value:"npm"},a.createElement(o.Z,{language:"shell"},function(e){let t="npm install ";return e.dev?t+="--save-dev ":e.peer&&(t+="--save-peer "),e.package&&(t+="--workspace "+e.package+" "),t+=e.dep,t}(e))),a.createElement(r.Z,{value:"pnpm"},a.createElement(o.Z,{language:"shell"},n)))}},1311:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var a=n(5773),o=(n(7378),n(5318)),r=(n(3337),n(9798),n(6642));const l={title:"TypeScript example",sidebar_label:"TypeScript"},s=void 0,i={unversionedId:"guides/examples/typescript",id:"guides/examples/typescript",title:"TypeScript example",description:"TypeScript has been prototyped in our",source:"@site/docs/guides/examples/typescript.mdx",sourceDirName:"guides/examples",slug:"/guides/examples/typescript",permalink:"/docs/guides/examples/typescript",draft:!1,editUrl:"https://github.com/moonrepo/moon/tree/master/website/docs/guides/examples/typescript.mdx",tags:[],version:"current",frontMatter:{title:"TypeScript example",sidebar_label:"TypeScript"},sidebar:"guides",previous:{title:"Remix",permalink:"/docs/guides/examples/remix"},next:{title:"Vite & Vitest",permalink:"/docs/guides/examples/vite"}},p={},c=[{value:"Setup",id:"setup",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Root-level",id:"root-level",level:3},{value:"Project-level",id:"project-level",level:3},{value:"Sharing",id:"sharing",level:3},{value:"FAQ",id:"faq",level:2},{value:"How to preserve pretty output?",id:"how-to-preserve-pretty-output",level:3}],u={toc:c};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"TypeScript has been prototyped in our\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/moonrepo/examples/blob/master/.moon/project.yml#L95"},"examples repository"),",\ncheck it out!")),(0,o.kt)("p",null,"In this guide, you'll learn how to integrate ",(0,o.kt)("a",{parentName:"p",href:"https://eslint.org/"},"TypeScript")," into moon. We'll be\nusing ",(0,o.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/project-references.html"},"project references"),", as\nit ensures that only affected projects are built, and not the entire repository."),(0,o.kt)("p",null,"Begin by installing ",(0,o.kt)("inlineCode",{parentName:"p"},"typescript")," and any pre-configured tsconfig packages in your root. We suggest\nusing the same version across the entire repository."),(0,o.kt)(r.Z,{dep:"typescript tsconfig-moon",dev:!0,mdxType:"AddDepsTabs"}),(0,o.kt)("h2",{id:"setup"},"Setup"),(0,o.kt)("p",null,"Since type-checking is a universal workflow, add a ",(0,o.kt)("inlineCode",{parentName:"p"},"typecheck")," task to\n",(0,o.kt)("a",{parentName:"p",href:"../../config/global-project"},(0,o.kt)("inlineCode",{parentName:"a"},".moon/project.yml"))," with the following parameters."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".moon/project.yml"',title:'".moon/project.yml"'},"tasks:\n    typecheck:\n        command:\n            - 'tsc'\n            # Use incremental builds with project references\n            - '--build'\n            # Always use pretty output\n            - '--pretty'\n            # Use verbose logging to see affected projects\n            - '--verbose'\n        inputs:\n            # Source and test files\n            - 'src/**/*'\n            - 'tests/**/*'\n            # Type declarations\n            - 'types/**/*'\n            # Project configs\n            - 'tsconfig.json'\n            - 'tsconfig.*.json'\n            # Root configs (extended from only)\n            - '/tsconfig.options.json'\n        outputs:\n            # Matches `compilerOptions.outDir`\n            - 'dts'\n")),(0,o.kt)("p",null,"Projects can extend this task and provide additional parameters if need be, for example."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="<project>/moon.yml"',title:'"<project>/moon.yml"'},"tasks:\n    typecheck:\n        args:\n            # Force build every time\n            - '--force'\n")),(0,o.kt)("h2",{id:"configuration"},"Configuration"),(0,o.kt)("h3",{id:"root-level"},"Root-level"),(0,o.kt)("p",null,"Multiple root-level TypeScript configs are ",(0,o.kt)("em",{parentName:"p"},"required"),", as we need to define compiler options that\nare shared across the repository, and we need to house a list of all project references."),(0,o.kt)("p",null,"To start, let's create a ",(0,o.kt)("inlineCode",{parentName:"p"},"tsconfig.options.json")," that will contain our compiler options. In our\nexample, we'll extend ",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/tsconfig-moon"},"tsconfig-moon")," for convenience.\nSpecifically, the ",(0,o.kt)("inlineCode",{parentName:"p"},"tsconfig.workspaces.json")," config, which enables ECMAScript modules, composite\nmode, declaration emitting, and incremental builds."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="tsconfig.options.json"',title:'"tsconfig.options.json"'},'{\n  "extends": "tsconfig-moon/tsconfig.projects.json",\n  "compilerOptions": {\n    // Your custom options\n    "moduleResolution": "nodenext",\n    "target": "es2022"\n  }\n}\n')),(0,o.kt)("p",null,"We'll also need the standard ",(0,o.kt)("inlineCode",{parentName:"p"},"tsconfig.json")," to house our project references. This is used by\neditors and tooling for deep integrations."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="tsconfig.json"',title:'"tsconfig.json"'},'{\n  "extends": "./tsconfig.options.json",\n  "files": [],\n  // All project references in the repo\n  "references": []\n}\n')),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"The ",(0,o.kt)("a",{parentName:"p",href:"../../config/workspace#rootconfigfilename"},(0,o.kt)("inlineCode",{parentName:"a"},"typescript.rootConfigFileName"))," setting can be\nused to change the root-level config name and the\n",(0,o.kt)("a",{parentName:"p",href:"../../config/workspace#syncprojectreferences"},(0,o.kt)("inlineCode",{parentName:"a"},"typescript.syncProjectReferences"))," setting will\nautomatically keep project references in sync!")),(0,o.kt)("h3",{id:"project-level"},"Project-level"),(0,o.kt)("p",null,"Every project will require a ",(0,o.kt)("inlineCode",{parentName:"p"},"tsconfig.json"),", as TypeScript itself requires it. The following\n",(0,o.kt)("inlineCode",{parentName:"p"},"tsconfig.json")," will typecheck the entire project, including source and test files."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="<project>/tsconfig.json"',title:'"<project>/tsconfig.json"'},'{\n  // Extend the root compiler options\n  "extends": "../../tsconfig.options.json",\n  "compilerOptions": {\n    // Declarations are written here\n    "outDir": "dts",\n    // Typecheck the entire project\n    "rootDir": "."\n  },\n  // Exclude build folders\n  "exclude": ["dts"],\n  // Include all files in the project\n  "include": ["**/*"],\n  // Reference project dependencies\n  "references": []\n}\n')),(0,o.kt)("p",null,"Be sure to exclude all build and output folders (",(0,o.kt)("inlineCode",{parentName:"p"},"dts"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"lib"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"esm"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"dist"),", etc), so that\nTypeScript doesn't inadvertently include them in the typechecker."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"The ",(0,o.kt)("a",{parentName:"p",href:"../../config/workspace#projectconfigfilename"},(0,o.kt)("inlineCode",{parentName:"a"},"typescript.projectConfigFileName"))," setting can\nbe used to change the project-level config name.")),(0,o.kt)("h3",{id:"sharing"},"Sharing"),(0,o.kt)("p",null,"To share configuration across projects, you have 3 options:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Define settings in a ",(0,o.kt)("a",{parentName:"li",href:"#root-level"},"root-level config"),". This only applies to the parent repository."),(0,o.kt)("li",{parentName:"ul"},"Create and publish an\n",(0,o.kt)("a",{parentName:"li",href:"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html#tsconfig-bases"},(0,o.kt)("inlineCode",{parentName:"a"},"tsconfig base")),"\nnpm package. This can be used in any repository."),(0,o.kt)("li",{parentName:"ul"},"A combination of 1 and 2.")),(0,o.kt)("p",null,"For options 2 and 3, if you're utilizing package workspaces, create a local package with the\nfollowing content."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="packages/tsconfig-company/tsconfig.json"',title:'"packages/tsconfig-company/tsconfig.json"'},'{\n  "compilerOptions": {\n    // ...\n    "lib": ["esnext"]\n  }\n}\n')),(0,o.kt)("p",null,"Within another ",(0,o.kt)("inlineCode",{parentName:"p"},"tsconfig.json"),", you can extend this package to inherit the settings."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="tsconfig.json"',title:'"tsconfig.json"'},'{\n  "extends": "tsconfig-company/tsconfig.json"\n}\n')),(0,o.kt)("h2",{id:"faq"},"FAQ"),(0,o.kt)("h3",{id:"how-to-preserve-pretty-output"},"How to preserve pretty output?"),(0,o.kt)("p",null,"TypeScript supports a pretty format where it includes codeframes and color highlighting for\nfailures. However, when ",(0,o.kt)("inlineCode",{parentName:"p"},"tsc")," is piped or the terminal is not a TTY, the pretty format is lost. To\npreserve and always display the pretty format, be sure to pass the ",(0,o.kt)("inlineCode",{parentName:"p"},"--pretty")," argument!"))}d.isMDXComponent=!0}}]);