"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9754],{5318:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(7378);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=l(n),d=r,g=u["".concat(p,".").concat(d)]||u[d]||m[d]||o;return n?a.createElement(g,i(i({ref:t},c),{},{components:n})):a.createElement(g,i({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2718:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var a=n(5773),r=(n(7378),n(5318));const o={title:"Tasks"},i=void 0,s={unversionedId:"concepts/task",id:"concepts/task",title:"Tasks",description:"Tasks are commands that are ran in the context of a project. Underneath the hood, a",source:"@site/docs/concepts/task.mdx",sourceDirName:"concepts",slug:"/concepts/task",permalink:"/docs/concepts/task",draft:!1,editUrl:"https://github.com/moonrepo/moon/tree/master/website/docs/concepts/task.mdx",tags:[],version:"current",frontMatter:{title:"Tasks"},sidebar:"docs",previous:{title:"Targets",permalink:"/docs/concepts/target"},next:{title:"Tokens",permalink:"/docs/concepts/token"}},p={},l=[{value:"Names",id:"names",level:2},{value:"Types",id:"types",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Merge strategies",id:"merge-strategies",level:2}],c={toc:l};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Tasks are commands that are ran in the context of a ",(0,r.kt)("a",{parentName:"p",href:"./project"},"project"),". Underneath the hood, a\ntask is simply an npm binary or a system command that is ran as a child process. Tasks are processed\nin a parallel thread pool within moon's orchestration layer."),(0,r.kt)("h2",{id:"names"},"Names"),(0,r.kt)("p",null,"A task name (or identifier) is a unique resource for locating a task ",(0,r.kt)("em",{parentName:"p"},"within")," a project. The name is\nexplicitly configured as a key within the ",(0,r.kt)("a",{parentName:"p",href:"../config/project#tasks"},(0,r.kt)("inlineCode",{parentName:"a"},"tasks"))," setting, and can be\nwritten in camel/kebab/snake case. Names support ",(0,r.kt)("inlineCode",{parentName:"p"},"a-z"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"A-Z"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"0-9"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"_"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"-"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"/"),", and must start\nwith a character."),(0,r.kt)("p",null,"A task name can be paired with a project name to create a ",(0,r.kt)("a",{parentName:"p",href:"./target"},"target"),"."),(0,r.kt)("h2",{id:"types"},"Types"),(0,r.kt)("p",null,"Tasks are categorized into 1 of the following types based on their configured parameters."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Build")," - Task generates one or many artifacts, and is derived from the\n",(0,r.kt)("a",{parentName:"li",href:"../config/project#outputs"},(0,r.kt)("inlineCode",{parentName:"a"},"outputs"))," setting."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Run")," - Task runs a one-off, long-running, or never-ending process, and is derived from the\n",(0,r.kt)("a",{parentName:"li",href:"../config/project#local"},(0,r.kt)("inlineCode",{parentName:"a"},"local"))," or ",(0,r.kt)("a",{parentName:"li",href:"../config/project#runinci"},(0,r.kt)("inlineCode",{parentName:"a"},"runInCI"))," settings."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Test")," - Task asserts code is correct and behaves as expected. This includes linting,\ntypechecking, unit tests, and any other form of testing.")),(0,r.kt)("h2",{id:"configuration"},"Configuration"),(0,r.kt)("p",null,"Tasks can be configured per project through ",(0,r.kt)("a",{parentName:"p",href:"../config/project"},(0,r.kt)("inlineCode",{parentName:"a"},"moon.yml")),", or for all projects\nthrough ",(0,r.kt)("a",{parentName:"p",href:"../config/global-project"},(0,r.kt)("inlineCode",{parentName:"a"},".moon/project.yml")),"."),(0,r.kt)("h2",{id:"merge-strategies"},"Merge strategies"),(0,r.kt)("p",null,"When a ",(0,r.kt)("a",{parentName:"p",href:"../config/global-project#tasks"},"global task")," and ",(0,r.kt)("a",{parentName:"p",href:"../config/project#tasks"},"local task")," of\nthe same name exist, they are merged into a single task. To accomplish this, one of many\n",(0,r.kt)("a",{parentName:"p",href:"../config/project#options"},"merge strategies")," can be used."),(0,r.kt)("p",null,"Merging is applied to the parameters ",(0,r.kt)("a",{parentName:"p",href:"../config/project#args"},(0,r.kt)("inlineCode",{parentName:"a"},"args")),",\n",(0,r.kt)("a",{parentName:"p",href:"../config/project#deps"},(0,r.kt)("inlineCode",{parentName:"a"},"deps")),", ",(0,r.kt)("a",{parentName:"p",href:"../config/project#env"},(0,r.kt)("inlineCode",{parentName:"a"},"env")),",\n",(0,r.kt)("a",{parentName:"p",href:"../config/project#inputs"},(0,r.kt)("inlineCode",{parentName:"a"},"inputs")),", and ",(0,r.kt)("a",{parentName:"p",href:"../config/project#outputs"},(0,r.kt)("inlineCode",{parentName:"a"},"outputs")),", using the\n",(0,r.kt)("a",{parentName:"p",href:"../config/project#mergeargs"},(0,r.kt)("inlineCode",{parentName:"a"},"mergeArgs")),", ",(0,r.kt)("a",{parentName:"p",href:"../config/project#mergedeps"},(0,r.kt)("inlineCode",{parentName:"a"},"mergeDeps")),",\n",(0,r.kt)("a",{parentName:"p",href:"../config/project#mergeenv"},(0,r.kt)("inlineCode",{parentName:"a"},"mergeEnv")),", ",(0,r.kt)("a",{parentName:"p",href:"../config/project#mergeinputs"},(0,r.kt)("inlineCode",{parentName:"a"},"mergeInputs"))," and\n",(0,r.kt)("a",{parentName:"p",href:"../config/project#mergeoutputs"},(0,r.kt)("inlineCode",{parentName:"a"},"mergeOutputs"))," options respectively. Each of these options support\none of the following strategy values."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"append")," (default) - Values found in the local task are merged ",(0,r.kt)("em",{parentName:"li"},"after")," the values found in the\nglobal task. For example, this strategy is useful for toggling flag arguments."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"prepend")," - Values found in the local task are merged ",(0,r.kt)("em",{parentName:"li"},"before")," the values found in the global\ntask. For example, this strategy is useful for applying option arguments that must come before\npositional arguments."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"replace")," - Values found in the local task entirely ",(0,r.kt)("em",{parentName:"li"},"replaces")," the values in the global task. This\nstrategy is useful when you need full control.")),(0,r.kt)("p",null,"All 3 of these strategies are demonstrated below, with a somewhat contrived example, but you get the\npoint."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"# Global\ntasks:\n  build:\n    command:\n      - 'webpack'\n      - '--mode'\n      - 'production'\n      - '--color'\n    deps:\n      - 'designSystem:build'\n    inputs:\n      - '/webpack.config.js'\n    outputs:\n      - 'build/'\n\n# Local\ntasks:\n  build:\n    args: '--no-color --no-stats'\n    deps:\n      - 'reactHooks:build'\n    inputs:\n      - 'webpack.config.js'\n    options:\n      mergeArgs: 'append'\n      mergeDeps: 'prepend'\n      mergeInputs: 'replace'\n\n# Merged result\ntasks:\n  build:\n    command:\n      - 'webpack'\n      - '--mode'\n      - 'production'\n      - '--color'\n      - '--no-color'\n      - '--no-stats'\n    deps:\n      - 'reactHooks:build'\n      - 'designSystem:build'\n    inputs:\n      - 'webpack.config.js'\n    outputs:\n      - 'build/'\n    options:\n      mergeArgs: 'append'\n      mergeDeps: 'prepend'\n      mergeInputs: 'replace'\n")))}m.isMDXComponent=!0}}]);